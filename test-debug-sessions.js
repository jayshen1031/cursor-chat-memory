const { SQLiteChatReader } = require('./out/sqliteChatReader');

async function debugSessions() {
  console.log('üîç Ë∞ÉËØï‰ºöËØùËøáÊª§ÈÄªËæë...\n');
  
  const reader = new SQLiteChatReader();
  
  // ‰∏¥Êó∂‰øÆÊîπËøáÊª§ÈÄªËæë - ÊÄªÊòØËøîÂõûtrue
  const originalFilter = reader.isRelevantToCurrentProject;
  reader.isRelevantToCurrentProject = function(title, summary, projectPath) {
    console.log(`üîé Ê£ÄÊü•‰ºöËØùÁõ∏ÂÖ≥ÊÄß:`);
    console.log(`   Ê†áÈ¢ò: "${title}"`);
    console.log(`   ÊëòË¶Å: "${summary.substring(0, 200)}..."`);
    console.log(`   È°πÁõÆË∑ØÂæÑ: "${projectPath}"`);
    
    const isRelevant = originalFilter.call(this, title, summary, projectPath);
    console.log(`   ÁªìÊûú: ${isRelevant ? '‚úÖ Áõ∏ÂÖ≥' : '‚ùå ‰∏çÁõ∏ÂÖ≥'}\n`);
    
    // ‰∏¥Êó∂ÊÄªÊòØËøîÂõûtrue‰ª•Êü•ÁúãÊâÄÊúâ‰ºöËØù
    return true;
  };
  
  try {
    const allSessions = await reader.scanAllWorkspaces('/Users/jay/Documents/baidu/projects/cursor-chat-memory');
    
    console.log(`\nüìä Êâ´ÊèèÁªìÊûú: ${allSessions.length} ‰∏™‰ºöËØù\n`);
    
    allSessions.forEach((session, index) => {
      console.log(`${index + 1}. üìù ${session.title}`);
      console.log(`   ID: ${session.id}`);
      console.log(`   Ê∂àÊÅØÊï∞: ${session.messages.length}`);
      console.log(`   ÈóÆÁ≠îÂØπÊï∞: ${session.qaPairs?.length || 0}`);
      console.log(`   ÂàÜÁ±ª: ${session.category}`);
      console.log(`   ÈáçË¶ÅÊÄß: ${(session.importance * 100).toFixed(0)}%`);
      console.log(`   ÊëòË¶Å: ${session.summary}`);
      console.log(`   Ê†áÁ≠æ: ${session.tags.map(t => t.name).join(', ')}`);
      
      // ÊòæÁ§∫Ê∂àÊÅØÂÜÖÂÆπ
      console.log('   Ê∂àÊÅØÂÜÖÂÆπ:');
      session.messages.slice(0, 4).forEach((msg, msgIndex) => {
        const preview = msg.content.substring(0, 80);
        console.log(`      ${msg.role}: "${preview}${msg.content.length > 80 ? '...' : ''}"`);
      });
      
      // ÊòæÁ§∫ÈóÆÁ≠îÂØπ
      if (session.qaPairs && session.qaPairs.length > 0) {
        console.log('   üîó ÈóÆÁ≠îÂØπ:');
        session.qaPairs.slice(0, 2).forEach((qa, qaIndex) => {
          console.log(`      Q: "${qa.question.substring(0, 60)}..."`);
          console.log(`      A: "${qa.answer.substring(0, 60)}..."`);
          console.log(`      ÁΩÆ‰ø°Â∫¶: ${(qa.confidence * 100).toFixed(0)}%`);
        });
      }
      
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Ë∞ÉËØïÂ§±Ë¥•:', error);
  }
}

debugSessions().catch(console.error); 